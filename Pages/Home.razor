@page "/"

@inject IGeolocationService Geolocation

<PageTitle>Home</PageTitle>

<OpenStreetMap @ref="_map" Style="height:100%; width:100%" Center=@_center>
    <Layers>
        <Layer SourceType="SourceType.TileWMS"
               Url="https: //tile.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}.png"
               Opacity=".3"
               CrossOrigin="anonymous">
        </Layer>
    </Layers>
    <Features>
        <Point @ref="_centerMarker" Radius="4" Coordinate=@_center></Point>
    </Features>
</OpenStreetMap>

@code {

    readonly PositionOptions _options = new()
    {
        EnableHighAccuracy = true,
        MaximumAge = 1000D,
        Timeout = 10000D
    };

    GeolocationPosition? _position;
    GeolocationPositionError? _positionError;
    private Map? _map;
    private OpenLayers.Blazor.Point? _centerMarker;
    Coordinate _center = new Coordinate(0, 0);
    bool _isLoading = true;


    protected override void OnInitialized()
    {
        Geolocation.WatchPosition(
            component: this,
            onSuccessCallbackMethodName: nameof(OnPositionReceived),
            onErrorCallbackMethodName: nameof(OnPositionError),
            options: _options);
    }

    [JSInvokable]
    public void OnPositionReceived(GeolocationPosition position)
    {
        _isLoading = false;
        _position = position;
        _center = new Coordinate(_position.Coords.Longitude, _position.Coords.Latitude);
        _map.ReadCoordinates(_centerMarker);
        //_map.SetCenter(_center);
        //_map.MarkersList.Add(new Marker(_center, "location-heading.svg", 5, 5, 5, 5) {Scale = 1, Popup = true});
        //_map.SetMarkers().
        //_map.SetZoom(16);
        StateHasChanged();
    }

    [JSInvokable]
    public void OnPositionError(GeolocationPositionError positionError)
    {
        _isLoading = false;
        _positionError = positionError;
        StateHasChanged();
    }

}